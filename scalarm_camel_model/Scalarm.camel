camel model ScalarmModel {

application ScalarmApplication {
	version: 'v1.0'
	owner: AGHOrganisation.morzech
	deployment models [ScalarmModel.ScalarmDeployment]
}

organisation model RP_ProviderRequirements {
    provider GlobalProviderRequirements {
      www: ""
      postal address:  ""
      email:  "noreply@foobar.org"
    }
    security level:  LOW
}

organisation model AGHOrganisation {
	organisation AGH {
		www: 'http://www.agh.edu.pl/en/'
		postal address: 'al. Mickiewicza 30, 30-059 Krakow, Poland'
		email: 'morzech@agh.edu.pl'
	}

	user morzech {
		first name: Michal
		last name: Orzechowski
		email: 'morzech@agh.edu.pl'
		paasage credentials 'morzech_at_agh_dot_edu_dot_pl'

		cloud credentials [
			Flexiant {
				cloud provider: ScalarmModel.RP_ProviderRequirements.GlobalProviderRequirements
			}
		]

	}

	security level: HIGH
}

deployment model ScalarmDeployment {

	requirement set NormalUbuntuGermanyRS {
		os: ScalarmRequirement.Ubuntu
	}

	requirement set CoreIntensiveUbuntuGermanyRS {
		os: ScalarmRequirement.Ubuntu
		quantitative hardware: ScalarmRequirement.DefaultVM

	}

	requirement set CPUIntensiveUbuntuGermanyRS {
		os: ScalarmRequirement.Ubuntu
		quantitative hardware: ScalarmRequirement.DefaultVM
	}

	requirement set StorageIntensiveUbuntuGermanyRS {
		os: ScalarmRequirement.Ubuntu
		quantitative hardware: ScalarmRequirement.DefaultVM
	}

	vm CoreIntensiveUbuntuGermany {
		requirement set CoreIntensiveUbuntuGermanyRS
		provided host CoreIntensiveUbuntuGermanyHost
	}

	vm CPUIntensiveUbuntuGermany {
		requirement set CPUIntensiveUbuntuGermanyRS
		provided host CPUIntensiveUbuntuGermanyHost
	}

	vm StorageIntensiveUbuntuGermany {
		requirement set StorageIntensiveUbuntuGermanyRS
		provided host StorageIntensiveUbuntuGermanyHost
	}

	internal component InformationService {
		provided communication InfSerPort {port: 11300}
		required host CoreIntensiveUbuntuGermanyHostReq

		configuration InformationServiceConfiguration {
			download: 'apt-get install -y curl && curl -L https://github.com/kliput/paasage-test-scripts/archive/master.tar.gz > master.tar.gz && tar -zxvf master.tar.gz'
			install: './paasage-test-scripts-master/install.sh'
			configure: './paasage-test-scripts-master/configure.sh'
			start: './paasage-test-scripts-master/start.sh'
		}
	}

	internal component StorageManager {
		provided communication StoManPort {port: 20001}
		provided communication MongoDbPort {port: 27017}

		required communication InfSerPortToSmReq {port: 11300 mandatory}

		required host StorageIntensiveUbuntuGermanyHostReq

		configuration StoreManagerConfiguration {
			download: 'apt-get install -y curl && curl -L https://github.com/kliput/paasage-test-scripts/archive/master.tar.gz > master.tar.gz && tar -zxvf master.tar.gz'
			install: './paasage-test-scripts-master/install.sh'
			configure: './paasage-test-scripts-master/configure.sh'
			start: './paasage-test-scripts-master/start.sh'
		}
	}

	internal component ExperimentManager {
		provided communication ExpManPort {port: 443}

		required communication InfSerPortToEmReq {port: 11300 mandatory}
		required communication StoManPortToEmReq {port: 20001 mandatory}
		required communication MongoDbPortToEmReq {port: 27017 mandatory}

		required host CoreIntensiveUbuntuGermanyHostReq

		configuration ExperimentManagerConfiguration {
			download: 'apt-get install -y curl && curl -L https://github.com/kliput/paasage-test-scripts/archive/master.tar.gz > master.tar.gz && tar -zxvf master.tar.gz'
			install: './paasage-test-scripts-master/install.sh'
			configure: './paasage-test-scripts-master/configure.sh'
			start: './paasage-test-scripts-master/start.sh'
		}
	}

	internal component SimulationManager {
		required communication InfSerPortToSimReq {port: 11300 mandatory}
		required communication StoManPortToSimReq {port: 20001 mandatory}
		required communication ExpManPortToSimReq {port: 443 mandatory}

		required host CPUIntensiveUbuntuGermanyHostReq

		configuration SimulationManagerConfiguration {
			download: 'apt-get install -y curl && curl -L https://github.com/kliput/paasage-test-scripts/archive/master.tar.gz > master.tar.gz && tar -zxvf master.tar.gz'
			install: './paasage-test-scripts-master/install.sh'
			configure: './paasage-test-scripts-master/configure.sh'
			start: './paasage-test-scripts-master/start.sh'
		}
	}


	hosting StorageManagerToStorageIntensiveUbuntuGermany {
		from StorageManager.StorageIntensiveUbuntuGermanyHostReq to StorageIntensiveUbuntuGermany.StorageIntensiveUbuntuGermanyHost
	}

	hosting ExperimentManagerToCoreIntensiveUbuntuGermany {
		from ExperimentManager.CoreIntensiveUbuntuGermanyHostReq to CoreIntensiveUbuntuGermany.CoreIntensiveUbuntuGermanyHost
	}

	hosting InformationServiceToCoreIntensiveUbuntuGermany {
		from InformationService.CoreIntensiveUbuntuGermanyHostReq to CoreIntensiveUbuntuGermany.CoreIntensiveUbuntuGermanyHost
	}

	hosting SimulationManagerToCPUIntensiveUbuntuGermany {
		from SimulationManager.CPUIntensiveUbuntuGermanyHostReq to CPUIntensiveUbuntuGermany.CPUIntensiveUbuntuGermanyHost
	}

	communication StorageManagerToInformationService {
		type: REMOTE
		from StorageManager.InfSerPortToSmReq to InformationService.InfSerPort
	}

	communication ExperimentManagerToStorageManager {
		type: REMOTE
		from ExperimentManager.StoManPortToEmReq to StorageManager.StoManPort
	}

	communication ExperimentManagerToMongoDb {
		type: REMOTE
		from ExperimentManager.MongoDbPortToEmReq to StorageManager.MongoDbPort
	}

	communication ExperimentManagerToInformationService {
		type: REMOTE
		from ExperimentManager.InfSerPortToEmReq to InformationService.InfSerPort
	}

	communication SimulationManagerToStorageManager {
		type: REMOTE
		from SimulationManager.StoManPortToSimReq to StorageManager.StoManPort
	}

	communication SimulationManagerToExperimentManager {
		type: REMOTE
		from SimulationManager.ExpManPortToSimReq to ExperimentManager.ExpManPort
	}

	communication SimulationManagerToInformationService {
		type: REMOTE
		from SimulationManager.InfSerPortToSimReq to InformationService.InfSerPort
	}

}

requirement model metrarmRequirement {
	quantitative hardware DefaultVM {
		core: 4..6
		ram: 4096..4096
	}

	os Ubuntu {os: 'Ubuntu' 64os}
	
}



}
